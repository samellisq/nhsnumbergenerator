value_correction = cumsum(range_width)[index.list -1]
}
random.value = min(listofranges[[index.list]]) + random.index
random.value = random.value - value_correction
print(random.index)
print(value_correction)
return(random.value)
}
sample_from_ranges(a)
sample_from_ranges(a)
sample_from_ranges(a)
#' Some info
#'
#' @param sdfa
#' @return asdfasd
#
sample_from_ranges = function(listofranges){
range_width = unlist(lapply(listofranges,diff)) + length(listofranges)
random.index = sample(1:sum(range_width),1)
index.list  = min(which(cumsum(range_width)>=random.index))
if(index.list==1){
index_correction = 0
} else {
index_correction = cumsum(range_width)[index.list -1]
}
random.value = min(listofranges[[index.list]]) + (random.index - index_correction)
random.value = random.value - value_correction
print(random.index)
print(index_correction)
return(random.value)
}
sample_from_ranges(a)
#' Some info
#'
#' @param sdfa
#' @return asdfasd
#
sample_from_ranges = function(listofranges){
range_width = unlist(lapply(listofranges,diff)) + length(listofranges)
random.index = sample(1:sum(range_width),1)
index.list  = min(which(cumsum(range_width)>=random.index))
if(index.list==1){
index_correction = 0
} else {
index_correction = cumsum(range_width)[index.list -1]
}
random.value = min(listofranges[[index.list]]) + (random.index - index_correction)
print(random.index)
print(index_correction)
return(random.value)
}
sample_from_ranges(a)
a
sample_from_ranges(a)
#' Some info
#'
#' @param sdfa
#' @return asdfasd
#
sample_from_ranges = function(listofranges){
range_width = unlist(lapply(listofranges,diff)) + length(listofranges)
random.index = sample(1:sum(range_width),1)
index.list  = min(which(cumsum(range_width)>=random.index))
if(index.list==1){
index_correction = 0
} else {
index_correction = cumsum(range_width)[index.list -1]
}
random.value = min(listofranges[[index.list]]) + (random.index - index_correction - 1)
print(random.index)
print(index_correction)
return(random.value)
}
sample_from_ranges(a)
sample_from_ranges(a)
sample_from_ranges(a)
sample_from_ranges(a)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
devtools::test()
devtools::document()
library(nhsnumbergenerator)
devtools::document()
random_nhs_number(1)
library(nhsnumbergenerator)
random_nhs_number(1)
library(nhsnumbergenerator)
random_nhs_number(1)
random_nhs_number(2)
library(nhsnumbergenerator)
random_nhs_number(2)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
warnings()
library(nhsnumbergenerator)
random_nhs_number(1)
is_valid_nhs_number("456607143")
library(nhsnumbergenerator)
random_nhs_number(1)
random_nhs_number(10)
random_nhs_number(100)
library(nhsnumbergenerator)
random_nhs_number(100)
devtools::test()
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
install.packages("profvis")
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
profvis({random_nhs_number(10)})
profvis({random_nhs_number(100)})
random_nhs_number(100)
random_nhs_number(100)
random_nhs_number(100)
random_nhs_number(100)
random_nhs_number(1000)
library(nhsnumbergenerator)
random_nhs_number(1000)
random_nhs_number(100)
random_nhs_number(100)
profvis({random_nhs_number(100)})
sample(1:10,1)
sample(1,10,1)
sample(c(1,10),1)
?sample
library(nhsnumbergenerator)
random_nhs_number(100)
runif(1,1,10)
floor(runif(1,1,10))
round(runif(1,1,10),0)
round(runif(1,1,10),0)
round(runif(1,1,10),0)
?round
library(nhsnumbergenerator)
random_nhs_number(100)
random_nhs_number(100)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
random_nhs_number(100)
random_nhs_number(100)
require(profvis)
profvis({random_nhs_number(1000)})
devtools::test()
random_nhs_number(100)
random_nhs_number(100, nhsnums.range = c(10,20))
random_nhs_number(100)
random_nhs_number(100)
random_nhs_number(100, nhsnums.range = c(10,20))
random_nhs_number(100, nhsnums.range = c(10,20))
random_nhs_number(100, nhsnums.range = c(100000000,20000000000))
library(nhsnumbergenerator)
devtools::document()
devtools::test()
library(nhsnumbergenerator)
devtools::test()
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
random_nhs_number(10, nhsnums.range = list(c(100000000,200000000)))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
library(nhsnumbergenerator)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
a=c(100000000,200000000)
a = list(as.integer(a))
a
sample_from_ranges(a)
library(nhsnumbergenerator)
sample_from_ranges(a)
rm(sample_from_ranges())
rm(sample_from_ranges)
library(nhsnumbergenerator)
sample_from_ranges(a)
devtools::document()
sample_from_ranges(a)
sample_from_ranges(a)
a = lapply(a, nine_digitify)
a
sample_from_ranges(a)
library(nhsnumbergenerator)
a = lapply(a, as.integer)
a
sample_from_ranges(a)
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
devtools::test()
library(nhsnumbergenerator)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
is.numeric(100)
is.numeric(1000000)
is.integer(1000000)
is.numeric(1000000)
10%%1
10.1%%1
library(nhsnumbergenerator)
a
sample_from_ranges(a)
a=list(c("100","200"),c("300","400"))
a
sample_from_ranges(a)
a=list(c(100,200),c(300,400))
sample_from_ranges(a)
a=list(c(100,200),c(400,300))
sample_from_ranges(a)
a=list(c(100,200),c(300,400.5))
sample_from_ranges(a)
?expect_output
library(nhsnumbergenerator)
list(c("100","200"),c("300","400"))
devtools::document()
devtools::test()
?random_nhs_number
library(nhsnumbergenerator)
library(nhsnumbergenerator)
generate_nhs_number(n = 10, determ = FALSE, seperators = FALSE, nhsnumber_value_range = NULL)
generate_nhs_number(n = 1000, determ = FALSE, seperators = FALSE, nhsnumber_value_range = NULL)
generate_nhs_number(n = 100, determ = FALSE, seperators = FALSE, nhsnumber_value_range = NULL)
generate_nhs_number(n = 100, determ = TRUE, seperators = FALSE, nhsnumber_value_range = NULL)
generate_nhs_number(n = 100, determ = TRUE, seperators = FALSE, nhsnumber_value_range = NULL)[1]
a<-generate_nhs_number(n = 100, determ = TRUE, seperators = FALSE, nhsnumber_value_range = NULL)[1]
require(stringr)
str_split(a,"")
str_split(a,"")[[1]]
library(nhsnumbergenerator)
devtools::document()
add_separators(a)
a
paste(a[1], a[2],a[3], separator,
a[4],a[5],a[6], separator,
a[7],a[8],a[9],a[10],
sep="", collapse = TRUE)
paste(a[1], a[2],a[3], "separator",
a[4],a[5],a[6], "separator",
a[7],a[8],a[9],a[10],
sep="", collapse = TRUE)
?paste
paste(a[1], a[2],a[3], "separator",
a[4],a[5],a[6], "separator",
a[7],a[8],a[9],a[10],
sep="", collapse = "")
a=str_split(a,"")
a
paste(a[1], a[2],a[3], "separator",
a[4],a[5],a[6], "separator",
a[7],a[8],a[9],a[10],
sep="", collapse = "")
paste("a","b")
paste("a","b",sep="")
paste(a[1], a[2],a[3], "separator",
a[4],a[5],a[6], "separator",
a[7],a[8],a[9],a[10],
sep="")
a=a[[1]]
paste(a[1], a[2],a[3], "separator",
a[4],a[5],a[6], "separator",
a[7],a[8],a[9],a[10],
sep="")
library(nhsnumbergenerator)
add_separators(a)
a = paste(a, sep="")
a
a = paste(a, collapse="")
a
add_separators(a)
library(nhsnumbergenerator)
add_separators(a)
library(nhsnumbergenerator)
add_separators(a)
library(nhsnumbergenerator)
add_separators(a)
add_separators(a,separator = "-")
is.numeric("")
is.numeric(as.numeric(" "))
a = str_split(a,"")
a
a = a[[1]]
a
str_detect(a, "[1-9]")
str_detect(a, "[0-9]")
paste(a,collapse = "")
library(nhsnumbergenerator)
devtools::test()
devtools::document()
library(nhsnumbergenerator)
a
a=paste(a,collapse="")
a
add_separators(a)
a = add_separators(a)
remove_separators(a)
library(nhsnumbergenerator)
devtools::document()
devtools::tools()
devtools::test()
library(nhsnumbergenerator)
devtools::test()
devtools::test()
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
generate_nhs_number(100, determ = FALSE)
generate_nhs_number(100, determ = TRUE)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = FALSE)
generate_nhs_number(100, determ = FALSE, seperators = TURE)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = FALSE, seperators = TRUE)
generate_nhs_number(100, determ = TRUE, seperators = TRUE)
generate_nhs_number(100, determ = TRUE, seperators = FALSE)
library(nhsnumbergenerator)
generate_nhs_number(100, determ = TRUE, seperators = FALSE)
generate_nhs_number(100, determ = TRUE)
generate_nhs_number(100, determ = TRUE, seperators = "XXX")
library(nhsnumbergenerator)
devtools::document()
devtools::test()
library(nhsnumbergenerator)
devtools::test()
remove_separators("400 000 0004")
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
generate_nhs_number(n =1, determ = TRUE
)
generate_nhs_number(n =1, determ = TRUE, nhsnumber_value_range = c(0,10))
deterministic_nhs_number(1, c(0,10))
deterministic_nhs_number(1, c(100000000,200000000))
generate_nhs_number(n =1, determ = TRUE, nhsnumber_value_range = c(100000000,200000000))
library(nhsnumbergenerator)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
devtools::test()
randomnhsnum= generate_nhs_number(n=1)
randomnhsnum
(randomnhsnum>=600000000 & randomnhsnum <=708800001)
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
randomnhsnum
as.numeric(randomnhsnum)
randomnhsnum= as.numeric(randomnhsnum)
randomnhsnum>=600000000
randomnhsnum <=708800001
randomnhsnum
randomnhsnum <=708800001
randomnhsnum
nine_digitify(randomnhsnum)
calculate_check_digit(400000000)
calculate_check_digit("400000000")
calculate_check_digit("499999999")
calculate_check_digit("600000000")
calculate_check_digit("708800001")
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
as.integer(100000000)
library(nhsnumbergenerator)
devtools::test()
calculate_check_digit("1000000000")
calculate_check_digit("2000000000")
calculate_check_digit("200000000")
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::document()
?generate_nhs_number
library(nhsnumbergenerator)
devtools::document()
?generate_nhs_number
library(nhsnumbergenerator)
devtools::document()
?generate_nhs_number
library(nhsnumbergenerator)
?generate_nhs_number
library(nhsnumbergenerator)
?generate_nhs_number
library(nhsnumbergenerator)
?generate_nhs_number
library(nhsnumbergenerator)
?generate_nhs_number
file.exists("~/.ssh/id_rsa.pub")
library(nhsnumbergenerator)
?deterministic_nhs_number
?calculate_check_digit
random_nhs_number(10, nhsnums.range = c(100000000,200000000))
random_nhs_number(10, nhsnums.range = list(c(100000000,200000000),c(300000000,400000000)))
library(nhsnumbergenerator)
?add_separators
add_separators("4000000004")
?nine_digitify
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001))
)
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
sample_from_ranges = function(listofranges){
for(i in 1:length(listofranges)){
if(!is.numeric(listofranges[[i]][1])|!is.numeric(listofranges[[i]][2])){stop("Range bounds must be numeric")}
if(listofranges[[i]][1]%%1 !=0 |listofranges[[i]][2]%%1 !=0 ){stop("Range bounds must be integers")}
if(listofranges[[i]][2]<=listofranges[[i]][1]){stop("The high end of the range should not be lower than the low end.")}
}
range_width = unlist(lapply(listofranges,diff)) + length(listofranges)
#random.index = sample(1:sum(range_width),1)
random.index = round(runif(1,1,sum(range_width)),0)
index.list  = min(which(cumsum(range_width)>=random.index))
if(index.list==1){
index_correction = 0
} else {
index_correction = cumsum(range_width)[index.list -1]
}
random.value = min(listofranges[[index.list]]) + (random.index - index_correction - 1)
return(random.value)
}
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
library(nhsnumbergenerator)
sample_from_ranges(list(c(400000000, 499999999),c(600000000, 708800001)))
generate_nhs_number(n =1, determ = TRUE, nhsnumber_value_range = c(100000000,200000000))
generate_nhs_number(n=1,nhsnumber_value_range = c(100000000,200000000))
library(nhsnumbergenerator)
library(nhsnumbergenerator)
devtools::test()
library(nhsnumbergenerator)
devtools::test()
generate_nhs_number(100)
library(nhsnumbergenerator)
library(nhsnumbergenerator)
